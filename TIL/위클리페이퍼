1.	클래스와 인스턴트
파이썬의 부류와 실체. 
클래스: 객체를 만들어 내기 위한 설계도 혹은 틀
객체가 가져야 할 상태(속성)와 행동(메서드)을 정의
인스턴트: 설계도를 바탕으로 소프트웨어 세계에 구현된 구체적인 실체
클래스의 정의를 바탕으로 실제 메모리 상에 할당된 객체
클래스는 추상적인 개념이며 실제 작업을 수행할 수 없고, 인스턴트는 이러한 클래스의 정의를 바탕으로 생성되어 실제 프로그램에서 작업을 수행하는 주제가 된다.
객체 지향 프로그래밍에서 매우 중요한 개념-> 이를 통해 코드의 재사용성과 유지보수성이 크게 향상되기 떄문.


2.	정적 메소드는 무엇이며, 어떻게 호출하는지?
클래스에 포함되는 단순한 유틸리티 메서드. 
특정 객체에 소속되지도 않고, 클래스와 관련된 동작을 하지 않는다.
그렇기에 객체가 없어도 호출이 가능하며, 객체와 상관없는 아주 일반적인 동작만 가능하다.
호출방법: 클래스에 포함되어 있으므로 클래스명.메서드() 로 호출된다.



3. 절대 경로와 상대 경로
절대 경로: 루트 디렉토리를 기준으로 어떤 파일이나 디렉토리의 고유한 경로를 표시하는 것.
Ex) /home/codeit/Documents/…/django
장점 : 어느 곳에서든 접근 가능
단점 : 경로가 변경되면 경로를 일일히 수정해야 한다

상대 경로 : 현재 자신이 위치해 있는 디렉토리 기준으로 경로를 나타내는 것.
(현재 디렉토리를 « . » 으로 표시)
Ex) cd ./django/django_coplat (아래로 갈 때)
*위로 올라가려면 « .. » 표시 !
장점 : 내부 구조만 그대로면 수정없이 그대로 사용 가능
단점 : 자기 자신이 기준이기 때문에, 자기 자신의 위치가 바뀌는 것에 취약하다.


4. Git에서 branch는 무엇이고, 왜 사용하나요?
브랜치란?
	독립적으로 어떤 작업을 진행하기 위한 개념
필요에 의해 만들어지는 각각의 브랜치는 다른 브랜치의 영향을 받지 않는다.
또한 이렇게 만들어진 브랜치는 다른 브랜치와 병합(Merge)함으로서, 작업한 내용을 다시 새로운 하나의 브랜치로 모을 수 있다.
그래서 다른 사람의 작업에 영향을 받지 않고 독립적으로 특정 작업을 수행하고, 문제가 발생했을 때 원인이 되는 작업을 찾아내거나 그에 따른 대책을 세우기 쉬워진다.

깃의 브랜치는 매우 가볍고 빠르다!
